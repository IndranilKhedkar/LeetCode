using Algorithms.Contracts;
using Algorithms.Helpers.Attibutes;
using Algorithms.Helpers.Enums;

namespace BitManipulation
{
    /// <summary>
    /// Reference Link: https://leetcode.com/problems/find-the-difference/
    /// Given two strings s and t which consist of only lowercase letters.
    /// String t is generated by random shuffling string s and then add one more letter at a random position.
    /// Find the letter that was added in t.
    /// Example:
    ///     Input: s = "abcd", t = "abcde"
    ///     Output: e
    ///     Explanation: 'e' is the letter that was added.    
    /// </summary>
    [RelatedTopic(Topic.BitManipulation)]
    public class FindTheDifference : Question
    {
        public char FindTheDifferenceBitManipulation(string s, string t)
        {
            int len = s.Length;
            int result = 0;
            int i;

            for (i = 0; i < len; i++)
            {
                result ^= (s[i] ^ t[i]);
            }

            return (char)(result ^ t[i]);
        }

        public char FindTheDifference_SumAndTakeDiff(string s, string t)
        {
            int sLen = s.Length;
            int tLen = t.Length;
            int result = t[tLen - 1];

            for (int i = 0; i < sLen; i++)
            {
                result = result - s[i] + t[i];
            }

            return (char)(result);
        }

        public override void Run()
        {
            // Example 1
            string s = "abcd";
            string t = "abcde";
            var result = FindTheDifferenceBitManipulation(s, t);
        }
    }
}
